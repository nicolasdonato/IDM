package ArduinoML.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class AndTest_TextGen extends SNodeTextGen {
  public void doGenerateText(SNode node) {
    if (SPropertyOperations.getString_def(SLinkOperations.getTarget(node, "component", false), "signal", "analogic").equalsIgnoreCase("digital")) {
      this.append("digital");
    } else if (SPropertyOperations.getString_def(SLinkOperations.getTarget(node, "component", false), "signal", "analogic").equalsIgnoreCase("analogic")) {
      this.append("analogic");
    }
    this.append("Read(");
    this.append(String.valueOf(SPropertyOperations.getInteger(SLinkOperations.getTarget(node, "component", false), "pin")));
    this.append(") ");
    this.append(SPropertyOperations.getString_def(node, "operator", "=="));
    this.append(" ");
    this.append(SPropertyOperations.getString(node, "value"));
    if (SLinkOperations.getTarget(node, "test", true) != null) {
      {
        SNode andTest = SLinkOperations.getTarget(node, "test", true);
        if (SNodeOperations.isInstanceOf(andTest, "ArduinoML.structure.AndTest")) {
          this.append(" && ");
        }
      }
      {
        SNode orTest = SLinkOperations.getTarget(node, "test", true);
        if (SNodeOperations.isInstanceOf(orTest, "ArduinoML.structure.OrTest")) {
          this.append(" || ");
        }
      }
      appendNode(SLinkOperations.getTarget(node, "test", true));
    }
  }
}
